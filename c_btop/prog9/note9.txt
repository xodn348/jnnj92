Ch9. More on functions
- Pointer to function
- use static variable in function
- share variables between functions
- functions call themselves without resulting in an indefinite loop
- write an Othello-type game

1.  pointer to function vs pointer to data
    1. Memory Location:
    Data Pointer:   Points to RAM (Stack/Heap)
    Function Pointer: Points to Code Segment (ROM)
    
    2. Modification:
    Data Pointer:   *pData = 20;        // Can modify data
    Function Pointer: pFunc = newFunc;   // Can only change which function to point to

    3. Arithmetic: 
    Data Pointer:   pData++;    // Valid: moves to next data item
    Function Pointer: pFunc++;  // Invalid: cannot do pointer arithmetic

    4. Usage:
    Data Pointer:   Used to access/modify data
    Function Pointer: Used for callbacks and dynamic function selection

    /* Initialize pointers to functions */
    {
    pfun[0] = sum;
    pfun[1] = product;
    pfun[2] = difference;
    }
    or 
    int (*pfun[3])(int, int) = { sum, product, difference };
    int (*pfun[])(int, int) = { sum, product, difference };

2. static variable : 
    1. it does not got detroyed when the function is exited(like global variable)
    2. initailization occur only once < > automatic variable occur everytime
    3. exist only in the scope of the function

            RAM (Read/Write Memory):
            +------------------------+
            | Stack:                 |
            | - Local variables     |
            +------------------------+
            | Heap:                 |
            | - Dynamic memory      |
            +------------------------+
            | Data Segment:         |
            | - Static variables    | ← Static vars here
            | - Global variables    |
            | - Initialized data    |
            +------------------------+

            ROM (Read-Only Memory):
            +------------------------+
            | Code Segment:          |
            | - Program code        |
            | - String literals     |
            | - Const data         |
            +------------------------+

3. 
Global variable : sharing variables between functions
static variable :  initailied only once and exist only in the scope of the function
local variable : exist only in the scope of the function

4. recursion : 
    - function call itself without resulting in an indefinite loop

5. functions with a variable number of arguments
#include <stdarg.h>
void va_start(va_list parg, last_fixed_arg);
type va_arg(va_list parg, type);
void va_end(va_list parg);
 
ex) double average( double v1, double v2,... until sentinel(0.0))
{
    code to go here...
}

6. main function command line arguments
ex) program.c

# Command line:
$ ./program hello world(all command-line arguments are string)

# In program:
argv[0] = "./program"    // Program name
argv[1] = "hello"        // First argument
argv[2] = "world"        // Second argument
argc = 3                 // Number of arguments (including program name)

# Memory layout:
argv --→ [ptr] --→ "./program\0"
         [ptr] --→ "hello\0"
         [ptr] --→ "world\0"
         [NULL]

agrv = argument vector
argc = argument count

7. end of program
#include <stdlib.h>
abort(); : terminate program abnormally immediately
exit(0); : terminate program gracefully
return 0; : terminate program gracefully

8. Enhancing performance
    1. how short function calls are compiled
    : short function calls are compiled as inline code
    2. use of pointer
    : restrict keyword