ch8. Structuring your program

1. variable scope and lifetime
Variables exist only within the block in which they’re defined.
The variables declared at the beginning of an outer block also exist in the inner block

automatic variables : Variables that are created when they’re declared and destroyed at the end of a block 
variable’s scope : The extent within the program code where a given variable is visible and can be referenced

2. two ways to receive information back
a. procide an address of a variable to a function and get a value back
b. get a return value from a function(return value)

3. general form of a function
Return_type Function_name( Parameters - separated by commas )
{
    Statements;
}

cf) 
1. if there is no return value, return_type is void
2.A function that returns a value can, and usually does, participate in an expression. For example
ex) result = 2.0*sqrt(2.0);

4. Naming function: start with capital letter when naming standard library functions
ex) Findlast, Explosion

5. void * type : return an address value but with no specified type.

6. 
printf stores data(argument) in the ROM(string literals) and printf gets this address.
dynamic data is stored in the heap(malloc, calloc, realloc)
other functions store data in the stack(automatic variables)

RAM:                          ROM:
+------------------+         +------------------+
| Stack:           |         | Code Segment:    |
| - input[]        |         | - program code   |
| - number_string[]|         +------------------+
+------------------+         | Read-Only Data:  |
| Heap:            |         | - string literals |
| - dynamic data   |         | - constants      |
+------------------+         +------------------+

7. pass-by-value mechanism
a. pass-by-value : copy the value of the argument into the function parameter(variable lifetime 이후에도 남아있음)
b. pass-by-reference : copy the address of the argument into the function parameter
cf) variable value can be change only through pass by reference.
if you want to make it unchanged, use const *pvariable


8. write like first. same effect but latter compiler would allocate some memoty and it is hard to find.

    value3 = average(value1, value2);
        printf("\nThe average is: %f\n", value3);

    printf("\nThe average is: %f", average(value1, value2));

9. function declaration = function prototype

10. pointer to pointer : when you use pointer's array, you need to pass pointer to pointer.(**pointer)
P   = &pS[i]    // Pointer to pointer (address of pointer)
*P  = pS[i]     // Pointer (points to string)
**P = *pS[i]    // String (actual characters)

ex) 
char *pS[NUM_P];     // Array of pointers
str_in(&pS[count])   // Pass pointer to pointer